// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// ProvidersAPI defines the contract for Providers operations
type ProvidersAPI interface {

	// CreateLocationProvider create a location provider.
	// Creates a new location provider and returns the created object.
	CreateLocationProvider(ctx context.Context, locationProvider LocationProvider) (*LocationProvider, error)

	// DeleteLocations deletes the last known location for all location providers.
	// This function deletes all locations for location providers known to the system.
	DeleteLocations(ctx context.Context) error

	// DeleteProviderById delete location provider.
	// Deletes the location provider object with the given id.
	DeleteProviderById(ctx context.Context, providerId string) error

	// DeleteProviderLocationById delete location of location provider.
	// Deletes the location object of the provider with the given id.
	DeleteProviderLocationById(ctx context.Context, providerId string) error

	// DeleteProviders delete all location providers.
	// This function deletes all location providers known to the system.
	DeleteProviders(ctx context.Context) error

	// GetAllLocations get all locations.
	// Returns the last known location for all location providers.
	GetAllLocations(ctx context.Context, crs string, zoneId string, geojson string) ([]Location, error)

	// GetAllProviderObjects get an array of all location providers.
	// Returns an array of all location provider objects.
	GetAllProviderObjects(ctx context.Context) ([]LocationProvider, error)

	// GetAllProviderTrackables get all trackables which are linked to this provider.
	// Returns the ids of all trackables which are linked to the location provider with the given id.
	GetAllProviderTrackables(ctx context.Context, providerId string) ([]string, error)

	// GetInsideFenceForProvider get all fences the location provider is within.
	// Returns all fences for which the location providers is currently considered as being inside the respective fence, e.g., for which a region entry fence event was triggered.
	GetInsideFenceForProvider(ctx context.Context, providerId string, spatialQuery bool) ([]Fence, error)

	// GetLocationByProviderId get location.
	// Returns the last known location for a location provider.
	GetLocationByProviderId(ctx context.Context, providerId string, crs string, zoneId string, geojson string) (*Location, error)

	// GetLocationProviderIds get an array of all location provider ids.
	// This function returns an array of ids of all available providers.
	GetLocationProviderIds(ctx context.Context) ([]string, error)

	// GetProviderById get a location provider.
	// Returns the location provider object with the given id.
	GetProviderById(ctx context.Context, providerId string) (*LocationProvider, error)

	// GetSensorsByProviderId get sensor data.
	// Returns the sensor data for the location provider with the given id.
	GetSensorsByProviderId(ctx context.Context, providerId string) (*AnyType, error)

	// UpdateLocationByProviderId update location.
	// This method updates the current location of the location provider with the given id.
	UpdateLocationByProviderId(ctx context.Context, providerId string, location Location) error

	// UpdateLocations update locations.
	// This path is used to update multiple locations in a bulk operation.
	UpdateLocations(ctx context.Context, location []Location) error

	// UpdateProviderById update a location provider.
	// Updates the location provider object with the given id.
	UpdateProviderById(ctx context.Context, providerId string, locationProvider LocationProvider) error

	// UpdateProximities bulk update of locations based on proximity events.
	// This method updates locations related to proximity events in a bulk operation. Location objects are generated internally by using the position and floor information related to the omlox™ zone that generated the proximity events.
	UpdateProximities(ctx context.Context, proximity []Proximity) error

	// UpdateProximityByProviderId update location of location provider via a proximity event.
	// This method updates the current location of one location provider by an emitted proximity event. A location object is generated internally by using the position and floor information related to the omlox™ zone that generated the proximity event.
	UpdateProximityByProviderId(ctx context.Context, providerId string, proximity Proximity) error

	// UpdateSensorsByProviderId update sensor data.
	// This method updates the sensor data of the location provider with the given id.
	UpdateSensorsByProviderId(ctx context.Context, providerId string, anyType AnyType) error
}

// Providers is a simple wrapper around the client for Providers requests
type Providers struct {
	client *Client
}

func (p *Providers) CreateLocationProvider(ctx context.Context, locationProvider LocationProvider) (*LocationProvider, error) {
	requestPath := "/v1/providers"

	return sendStructuredRequestParseResponse[LocationProvider](
		ctx,
		p.client,
		http.MethodPost,
		requestPath,
		locationProvider,
		nil,
		nil,
	)

}

func (p *Providers) DeleteLocations(ctx context.Context) error {
	requestPath := "/v1/providers/locations"

	_, err := sendRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) DeleteProviderById(ctx context.Context, providerId string) error {
	requestPath := "/v1/providers/{provider_id}"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) DeleteProviderLocationById(ctx context.Context, providerId string) error {
	requestPath := "/v1/providers/{provider_id}/location"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) DeleteProviders(ctx context.Context) error {
	requestPath := "/v1/providers"

	_, err := sendRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) GetAllLocations(ctx context.Context, crs string, zoneId string, geojson string) ([]Location, error) {
	requestPath := "/v1/providers/locations"

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponseList[Location](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (p *Providers) GetAllProviderObjects(ctx context.Context) ([]LocationProvider, error) {
	requestPath := "/v1/providers/summary"

	return sendRequestParseResponseList[LocationProvider](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (p *Providers) GetAllProviderTrackables(ctx context.Context, providerId string) ([]string, error) {
	requestPath := "/v1/providers/{provider_id}/trackables"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	return sendRequestParseResponseList[string](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (p *Providers) GetInsideFenceForProvider(ctx context.Context, providerId string, spatialQuery bool) ([]Fence, error) {
	requestPath := "/v1/providers/{provider_id}/fences"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[Fence](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (p *Providers) GetLocationByProviderId(ctx context.Context, providerId string, crs string, zoneId string, geojson string) (*Location, error) {
	requestPath := "/v1/providers/{provider_id}/location"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponse[Location](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (p *Providers) GetLocationProviderIds(ctx context.Context) ([]string, error) {
	requestPath := "/v1/providers"

	return sendRequestParseResponseList[string](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (p *Providers) GetProviderById(ctx context.Context, providerId string) (*LocationProvider, error) {
	requestPath := "/v1/providers/{provider_id}"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	return sendRequestParseResponse[LocationProvider](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (p *Providers) GetSensorsByProviderId(ctx context.Context, providerId string) (*AnyType, error) {
	requestPath := "/v1/providers/{provider_id}/sensors"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	return sendRequestParseResponse[AnyType](
		ctx,
		p.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (p *Providers) UpdateLocationByProviderId(ctx context.Context, providerId string, location Location) error {
	requestPath := "/v1/providers/{provider_id}/location"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) UpdateLocations(ctx context.Context, location []Location) error {
	requestPath := "/v1/providers/locations"

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) UpdateProviderById(ctx context.Context, providerId string, locationProvider LocationProvider) error {
	requestPath := "/v1/providers/{provider_id}"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) UpdateProximities(ctx context.Context, proximity []Proximity) error {
	requestPath := "/v1/providers/proximities"

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) UpdateProximityByProviderId(ctx context.Context, providerId string, proximity Proximity) error {
	requestPath := "/v1/providers/{provider_id}/proximity"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (p *Providers) UpdateSensorsByProviderId(ctx context.Context, providerId string, anyType AnyType) error {
	requestPath := "/v1/providers/{provider_id}/sensors"
	requestPath = strings.Replace(requestPath, "{"+"provider_id"+"}", url.PathEscape(providerId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		p.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}
