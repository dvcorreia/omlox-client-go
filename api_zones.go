// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// ZonesAPI defines the contract for Zones operations
type ZonesAPI interface {

	// CreateFenceFromZone create a fence object from a zone.
	// Creates a geofence object using the ground control points of the zone with the given id.
	CreateFenceFromZone(ctx context.Context, zoneId string) (*Fence, error)

	// CreateZone create a zone.
	// Creates a new zone and returns the created object.
	CreateZone(ctx context.Context, zone Zone) (*Zone, error)

	// DeleteAllZones delete all zones.
	// This function deletes all zones known to the system.
	DeleteAllZones(ctx context.Context) error

	// DeleteZoneById delete a zone.
	// Deletes the zone object with the given id.
	DeleteZoneById(ctx context.Context, zoneId string) error

	// GetAllZoneObjects get an array of all zones.
	// Returns an array of all zone objects.
	GetAllZoneObjects(ctx context.Context) ([]Zone, error)

	// GetZoneById get a zone.
	// Returns the zone object with the given id.
	GetZoneById(ctx context.Context, zoneId string) (*Zone, error)

	// GetZoneIds get an array of all zone ids.
	// This function returns an array of ids of all available zones.
	GetZoneIds(ctx context.Context, foreignId string) ([]string, error)

	// TransformByZoneId transform a position within a zone to geographic coordinates.
	// Transforms the coordinates of a position in the zone with the given id to geographic coordinates.
	TransformByZoneId(ctx context.Context, zoneId string, simpleTransform SimpleTransform, geojson string) (*SimpleTransform, error)

	// UpdateZoneById update a zone.
	// Updates the zone object with the given id.
	UpdateZoneById(ctx context.Context, zoneId string, zone Zone) error
}

// Zones is a simple wrapper around the client for Zones requests
type Zones struct {
	client *Client
}

func (z *Zones) CreateFenceFromZone(ctx context.Context, zoneId string) (*Fence, error) {
	requestPath := "/v1/zones/{zone_id}/createfence"
	requestPath = strings.Replace(requestPath, "{"+"zone_id"+"}", url.PathEscape(zoneId), -1)

	return sendRequestParseResponse[Fence](
		ctx,
		z.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (z *Zones) CreateZone(ctx context.Context, zone Zone) (*Zone, error) {
	requestPath := "/v1/zones"

	return sendStructuredRequestParseResponse[Zone](
		ctx,
		z.client,
		http.MethodPost,
		requestPath,
		zone,
		nil,
		nil,
	)

}

func (z *Zones) DeleteAllZones(ctx context.Context) error {
	requestPath := "/v1/zones"

	_, err := sendRequestParseResponse[any](
		ctx,
		z.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (z *Zones) DeleteZoneById(ctx context.Context, zoneId string) error {
	requestPath := "/v1/zones/{zone_id}"
	requestPath = strings.Replace(requestPath, "{"+"zone_id"+"}", url.PathEscape(zoneId), -1)

	_, err := sendRequestParseResponse[any](
		ctx,
		z.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (z *Zones) GetAllZoneObjects(ctx context.Context) ([]Zone, error) {
	requestPath := "/v1/zones/summary"

	return sendRequestParseResponseList[Zone](
		ctx,
		z.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (z *Zones) GetZoneById(ctx context.Context, zoneId string) (*Zone, error) {
	requestPath := "/v1/zones/{zone_id}"
	requestPath = strings.Replace(requestPath, "{"+"zone_id"+"}", url.PathEscape(zoneId), -1)

	return sendRequestParseResponse[Zone](
		ctx,
		z.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (z *Zones) GetZoneIds(ctx context.Context, foreignId string) ([]string, error) {
	requestPath := "/v1/zones"

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("foreign_id", parameterToString(foreignId))

	return sendRequestParseResponseList[string](
		ctx,
		z.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (z *Zones) TransformByZoneId(ctx context.Context, zoneId string, simpleTransform SimpleTransform, geojson string) (*SimpleTransform, error) {
	requestPath := "/v1/zones/{zone_id}/transform"
	requestPath = strings.Replace(requestPath, "{"+"zone_id"+"}", url.PathEscape(zoneId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendStructuredRequestParseResponse[SimpleTransform](
		ctx,
		z.client,
		http.MethodPut,
		requestPath,
		simpleTransform,
		requestQueryParameters,
		nil,
	)

}

func (z *Zones) UpdateZoneById(ctx context.Context, zoneId string, zone Zone) error {
	requestPath := "/v1/zones/{zone_id}"
	requestPath = strings.Replace(requestPath, "{"+"zone_id"+"}", url.PathEscape(zoneId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		z.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}
