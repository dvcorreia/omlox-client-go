// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// FencesAPI defines the contract for Fences operations
type FencesAPI interface {

	// CreateFence create a fence.
	// Creates a new fence and returns the created object.
	CreateFence(ctx context.Context, fence Fence) (*Fence, error)

	// DeleteFenceById delete a fence.
	// Deletes the fence object with the given id.
	DeleteFenceById(ctx context.Context, fenceId string) error

	// DeleteFences delete all fences.
	// This function deletes all fences known to the system.
	DeleteFences(ctx context.Context) error

	// GetAllFenceIds get an array of all fence ids.
	// This function returns an array of ids of all available fences.
	GetAllFenceIds(ctx context.Context) ([]string, error)

	// GetAllFences get an array of all fences.
	// Returns an array of all fence objects.
	GetAllFences(ctx context.Context, crs string, zoneId string, geojson string) ([]Fence, error)

	// GetFenceById get a fence.
	// Returns the fence object with the given id.
	GetFenceById(ctx context.Context, fenceId string, crs string, zoneId string, geojson string) (*Fence, error)

	// GetLocationsInsideFence get location data of all location providers within a fence.
	// Returns locations of location providers which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
	GetLocationsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) ([]Location, error)

	// GetProvidersInsideFence get all location providers within a fence.
	// Returns location providers which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
	GetProvidersInsideFence(ctx context.Context, fenceId string, spatialQuery bool) ([]LocationProvider, error)

	// GetTrackableMotionsInsideFence get motion data of all trackables within a fence.
	// Returns motions of trackables which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
	GetTrackableMotionsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) ([]Location, error)

	// GetTrackablesInside get all trackables within a fence.
	// Returns trackables which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
	GetTrackablesInside(ctx context.Context, fenceId string, spatialQuery bool) ([]Trackable, error)

	// UpdateFenceById update a fence.
	// Updates the fence object with the given id.
	UpdateFenceById(ctx context.Context, fenceId string, fence Fence) error
}

type fencesAPI struct {
	client *Client
}

var _ FencesAPI = (*fencesAPI)(nil)

// CreateFence create a fence.
// Creates a new fence and returns the created object.
func (f *fencesAPI) CreateFence(ctx context.Context, fence Fence) (*Fence, error) {
	requestPath := "/v1/fences"

	return sendStructuredRequestParseResponse[Fence](
		ctx,
		f.client,
		http.MethodPost,
		requestPath,
		fence,
		nil,
		nil,
	)

}

// DeleteFenceById delete a fence.
// Deletes the fence object with the given id.
func (f *fencesAPI) DeleteFenceById(ctx context.Context, fenceId string) error {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	_, err := sendRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

// DeleteFences delete all fences.
// This function deletes all fences known to the system.
func (f *fencesAPI) DeleteFences(ctx context.Context) error {
	requestPath := "/v1/fences"

	_, err := sendRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

// GetAllFenceIds get an array of all fence ids.
// This function returns an array of ids of all available fences.
func (f *fencesAPI) GetAllFenceIds(ctx context.Context) ([]string, error) {
	requestPath := "/v1/fences"

	return sendRequestParseResponseList[string](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

// GetAllFences get an array of all fences.
// Returns an array of all fence objects.
func (f *fencesAPI) GetAllFences(ctx context.Context, crs string, zoneId string, geojson string) ([]Fence, error) {
	requestPath := "/v1/fences/summary"

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponseList[Fence](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// GetFenceById get a fence.
// Returns the fence object with the given id.
func (f *fencesAPI) GetFenceById(ctx context.Context, fenceId string, crs string, zoneId string, geojson string) (*Fence, error) {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponse[Fence](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// GetLocationsInsideFence get location data of all location providers within a fence.
// Returns locations of location providers which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *fencesAPI) GetLocationsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) ([]Location, error) {
	requestPath := "/v1/fences/{fence_id}/locations"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[Location](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// GetProvidersInsideFence get all location providers within a fence.
// Returns location providers which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *fencesAPI) GetProvidersInsideFence(ctx context.Context, fenceId string, spatialQuery bool) ([]LocationProvider, error) {
	requestPath := "/v1/fences/{fence_id}/providers"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[LocationProvider](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// GetTrackableMotionsInsideFence get motion data of all trackables within a fence.
// Returns motions of trackables which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *fencesAPI) GetTrackableMotionsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) ([]Location, error) {
	requestPath := "/v1/fences/{fence_id}/motions"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[Location](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// GetTrackablesInside get all trackables within a fence.
// Returns trackables which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *fencesAPI) GetTrackablesInside(ctx context.Context, fenceId string, spatialQuery bool) ([]Trackable, error) {
	requestPath := "/v1/fences/{fence_id}/trackables"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[Trackable](
		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

// UpdateFenceById update a fence.
// Updates the fence object with the given id.
func (f *fencesAPI) UpdateFenceById(ctx context.Context, fenceId string, fence Fence) error {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}
