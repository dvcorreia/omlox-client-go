// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox


import (
	"context"
	"net/http"
	"net/url"
	"strings"
	"strings"

)

// Fences is a simple wrapper around the client for Fences requests
type Fences struct {
	client *Client
}


// CreateFence create a fence.
// Creates a new fence and returns the created object.
func (f *Fences) CreateFence(ctx context.Context, fence Fence) (*Fence, error) {
	requestPath := "/v1/fences"






	return sendStructuredRequestParseResponse[Fence](

		ctx,
		f.client,
		http.MethodPost,
		requestPath,
		fence,

		nil,

		nil,
	)




}



// DeleteFenceById delete a fence.
// Deletes the fence object with the given id.
func (f *Fences) DeleteFenceById(ctx context.Context, fenceId string) (error) {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)







	_, err := sendRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodDelete,
		requestPath,
		nil,

		nil,

		nil,
	)
	return err


}



// DeleteFences delete all fences.
// This function deletes all fences known to the system.
func (f *Fences) DeleteFences(ctx context.Context) (error) {
	requestPath := "/v1/fences"







	_, err := sendRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodDelete,
		requestPath,
		nil,

		nil,

		nil,
	)
	return err


}



// GetAllFenceIds get an array of all fence ids.
// This function returns an array of ids of all available fences.
func (f *Fences) GetAllFenceIds(ctx context.Context) (*[]string, error) {
	requestPath := "/v1/fences"







	return sendRequestParseResponse[[]string](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		nil,

		nil,
	)



}



// GetAllFences get an array of all fences.
// Returns an array of all fence objects.
func (f *Fences) GetAllFences(ctx context.Context, crs string, zoneId string, geojson string) (*[]Fence, error) {
	requestPath := "/v1/fences/summary"


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("crs", parameterToString(crs))



	requestQueryParameters.Add("zone_id", parameterToString(zoneId))



	requestQueryParameters.Add("geojson", parameterToString(geojson))








	return sendRequestParseResponse[[]Fence](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// GetFenceById get a fence.
// Returns the fence object with the given id.
func (f *Fences) GetFenceById(ctx context.Context, fenceId string, crs string, zoneId string, geojson string) (*Fence, error) {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("crs", parameterToString(crs))



	requestQueryParameters.Add("zone_id", parameterToString(zoneId))



	requestQueryParameters.Add("geojson", parameterToString(geojson))








	return sendRequestParseResponse[Fence](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// GetLocationsInsideFence get location data of all location providers within a fence.
// Returns locations of location providers which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *Fences) GetLocationsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) (*[]Location, error) {
	requestPath := "/v1/fences/{fence_id}/locations"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("crs", parameterToString(crs))



	requestQueryParameters.Add("zone_id", parameterToString(zoneId))



	requestQueryParameters.Add("geojson", parameterToString(geojson))



	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))








	return sendRequestParseResponse[[]Location](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// GetProvidersInsideFence get all location providers within a fence.
// Returns location providers which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *Fences) GetProvidersInsideFence(ctx context.Context, fenceId string, spatialQuery bool) (*[]LocationProvider, error) {
	requestPath := "/v1/fences/{fence_id}/providers"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))








	return sendRequestParseResponse[[]LocationProvider](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// GetTrackableMotionsInsideFence get motion data of all trackables within a fence.
// Returns motions of trackables which are currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *Fences) GetTrackableMotionsInsideFence(ctx context.Context, fenceId string, crs string, zoneId string, geojson string, spatialQuery bool) (*[]Location, error) {
	requestPath := "/v1/fences/{fence_id}/motions"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("crs", parameterToString(crs))



	requestQueryParameters.Add("zone_id", parameterToString(zoneId))



	requestQueryParameters.Add("geojson", parameterToString(geojson))



	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))








	return sendRequestParseResponse[[]Location](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// GetTrackablesInside get all trackables within a fence.
// Returns trackables which have a location that is currently considered as being inside the given fence, e.g., for which a region entry fence event was triggered.
func (f *Fences) GetTrackablesInside(ctx context.Context, fenceId string, spatialQuery bool) (*[]Trackable, error) {
	requestPath := "/v1/fences/{fence_id}/trackables"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)


	requestQueryParameters := url.Values{}


	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))








	return sendRequestParseResponse[[]Trackable](

		ctx,
		f.client,
		http.MethodGet,
		requestPath,
		nil,

		requestQueryParameters,

		nil,
	)



}



// UpdateFenceById update a fence.
// Updates the fence object with the given id.
func (f *Fences) UpdateFenceById(ctx context.Context, fenceId string, fence Fence) (error) {
	requestPath := "/v1/fences/{fence_id}"
	requestPath = strings.Replace(requestPath, "{"+"fence_id"+"}", url.PathEscape(fenceId), -1)






	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		f.client,
		http.MethodPut,
		requestPath,
		,

		nil,

		nil,
	)
	return err



}


