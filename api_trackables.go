// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// TrackablesAPI defines the contract for Trackables operations
type TrackablesAPI interface {

	// CreateNewTrackable create a trackable.
	// Creates a new trackable with a randomly generated id.
	CreateNewTrackable(ctx context.Context, trackable Trackable) (*Trackable, error)

	// DeleteAllTrackables delete all trackables.
	// This function deletes all trackables known to the system.
	DeleteAllTrackables(ctx context.Context) error

	// DeleteTrackableById delete a trackable.
	// Deletes the trackable object with the given id.
	DeleteTrackableById(ctx context.Context, trackableId string) error

	// GetAllTrackableIds get an array of all trackable ids.
	// This function returns an array of ids of all available trackables.
	GetAllTrackableIds(ctx context.Context) ([]string, error)

	// GetAllTrackableLocations get all locations.
	// Returns the last known location of the trackable with the given id for all of its location providers.
	GetAllTrackableLocations(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) ([]Location, error)

	// GetAllTrackableMotions get an array of all trackable motion objects.
	// Returns an array of all trackable motion objects.
	GetAllTrackableMotions(ctx context.Context, crs string, zoneId string, geojson string) ([]TrackableMotion, error)

	// GetAllTrackableObjects get an array of all trackables.
	// Returns an array of all trackable objects.
	GetAllTrackableObjects(ctx context.Context) ([]Trackable, error)

	// GetAllTrackableProviders get all providers linked to this trackable.
	// Returns the ids of all location providers linked to the trackable with the given id.
	GetAllTrackableProviders(ctx context.Context, trackableId string) ([]string, error)

	// GetAllTrackableSensors get an array of sensor objects.
	// Returns data from the sensors of all location providers associated with the trackable with the given id.
	GetAllTrackableSensors(ctx context.Context, trackableId string) (*AnyType, error)

	// GetInsideFenceForTrackable get all fences the trackable is within.
	// Returns all fences for which the trackable is currently considered as being inside the respective fence, e.g., for which a region entry fence event was triggered.
	GetInsideFenceForTrackable(ctx context.Context, trackableId string, spatialQuery bool) ([]Fence, error)

	// GetMostSignificantTrackableLocation get a location.
	// Returns the most significant location of the trackable with the given id, with consideration of all location updates from the trackable's location providers.
	GetMostSignificantTrackableLocation(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*Location, error)

	// GetTrackableById get a trackable.
	// Returns the trackable object with the given id.
	GetTrackableById(ctx context.Context, trackableId string) (*Trackable, error)

	// GetTrackableMotion get a motion.
	// Returns the motion object for the trackable with the given id.
	GetTrackableMotion(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*TrackableMotion, error)

	// UpdateTrackableById updates a trackable.
	// Updates the trackable object with the given id.
	UpdateTrackableById(ctx context.Context, trackableId string, trackable Trackable) error
}

// Trackables is a simple wrapper around the client for Trackables requests
type Trackables struct {
	client *Client
}

func (t *Trackables) CreateNewTrackable(ctx context.Context, trackable Trackable) (*Trackable, error) {
	requestPath := "/v1/trackables"

	return sendStructuredRequestParseResponse[Trackable](
		ctx,
		t.client,
		http.MethodPost,
		requestPath,
		trackable,
		nil,
		nil,
	)

}

func (t *Trackables) DeleteAllTrackables(ctx context.Context) error {
	requestPath := "/v1/trackables"

	_, err := sendRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (t *Trackables) DeleteTrackableById(ctx context.Context, trackableId string) error {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	_, err := sendRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}

func (t *Trackables) GetAllTrackableIds(ctx context.Context) ([]string, error) {
	requestPath := "/v1/trackables"

	return sendRequestParseResponseList[string](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (t *Trackables) GetAllTrackableLocations(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) ([]Location, error) {
	requestPath := "/v1/trackables/{trackable_id}/locations"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponseList[Location](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (t *Trackables) GetAllTrackableMotions(ctx context.Context, crs string, zoneId string, geojson string) ([]TrackableMotion, error) {
	requestPath := "/v1/trackables/motions"

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponseList[TrackableMotion](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (t *Trackables) GetAllTrackableObjects(ctx context.Context) ([]Trackable, error) {
	requestPath := "/v1/trackables/summary"

	return sendRequestParseResponseList[Trackable](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (t *Trackables) GetAllTrackableProviders(ctx context.Context, trackableId string) ([]string, error) {
	requestPath := "/v1/trackables/{trackable_id}/providers"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	return sendRequestParseResponseList[string](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (t *Trackables) GetAllTrackableSensors(ctx context.Context, trackableId string) (*AnyType, error) {
	requestPath := "/v1/trackables/{trackable_id}/sensors"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	return sendRequestParseResponse[AnyType](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (t *Trackables) GetInsideFenceForTrackable(ctx context.Context, trackableId string, spatialQuery bool) ([]Fence, error) {
	requestPath := "/v1/trackables/{trackable_id}/fences"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))

	return sendRequestParseResponseList[Fence](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (t *Trackables) GetMostSignificantTrackableLocation(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*Location, error) {
	requestPath := "/v1/trackables/{trackable_id}/location"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponse[Location](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (t *Trackables) GetTrackableById(ctx context.Context, trackableId string) (*Trackable, error) {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	return sendRequestParseResponse[Trackable](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)

}

func (t *Trackables) GetTrackableMotion(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*TrackableMotion, error) {
	requestPath := "/v1/trackables/{trackable_id}/motion"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	requestQueryParameters := url.Values{}
	requestQueryParameters.Add("crs", parameterToString(crs))
	requestQueryParameters.Add("zone_id", parameterToString(zoneId))
	requestQueryParameters.Add("geojson", parameterToString(geojson))

	return sendRequestParseResponse[TrackableMotion](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)

}

func (t *Trackables) UpdateTrackableById(ctx context.Context, trackableId string, trackable Trackable) error {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)

	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err

}
