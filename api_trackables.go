// Copyright (c) Omlox Client Go Contributors
// SPDX-License-Identifier: MIT
//
// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omlox


import (
	"context"
	"net/http"
	"net/url"
	"strings"

)

// Trackables is a simple wrapper around the client for Trackables requests
type Trackables struct {
	client *Client
}


// CreateNewTrackable create a trackable.
// Creates a new trackable with a randomly generated id.
func (t *Trackables) CreateNewTrackable(ctx context.Context, trackable Trackable) (*Trackable, error) {
	requestPath := "/v1/trackables"





	return sendStructuredRequestParseResponse[Trackable](
		ctx,
		t.client,
		http.MethodPost,
		requestPath,
		trackable,
		nil,
		nil,
	)




}



// DeleteAllTrackables delete all trackables.
// This function deletes all trackables known to the system.
func (t *Trackables) DeleteAllTrackables(ctx context.Context) (error) {
	requestPath := "/v1/trackables"







	_, err := sendRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err


}



// DeleteTrackableById delete a trackable.
// Deletes the trackable object with the given id.
func (t *Trackables) DeleteTrackableById(ctx context.Context, trackableId string) (error) {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)







	_, err := sendRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodDelete,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err


}



// GetAllTrackableIds get an array of all trackable ids.
// This function returns an array of ids of all available trackables.
func (t *Trackables) GetAllTrackableIds(ctx context.Context) (*[]string, error) {
	requestPath := "/v1/trackables"






	return sendRequestParseResponse[[]string](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)



}



// GetAllTrackableLocations get all locations.
// Returns the last known location of the trackable with the given id for all of its location providers.
func (t *Trackables) GetAllTrackableLocations(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*[]Location, error) {
	requestPath := "/v1/trackables/{trackable_id}/locations"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)


   requestQueryParameters := url.Values{}
   requestQueryParameters.Add("crs", parameterToString(crs))
   requestQueryParameters.Add("zone_id", parameterToString(zoneId))
   requestQueryParameters.Add("geojson", parameterToString(geojson))





	return sendRequestParseResponse[[]Location](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)



}



// GetAllTrackableMotions get an array of all trackable motion objects.
// Returns an array of all trackable motion objects.
func (t *Trackables) GetAllTrackableMotions(ctx context.Context, crs string, zoneId string, geojson string) (*[]TrackableMotion, error) {
	requestPath := "/v1/trackables/motions"


   requestQueryParameters := url.Values{}
   requestQueryParameters.Add("crs", parameterToString(crs))
   requestQueryParameters.Add("zone_id", parameterToString(zoneId))
   requestQueryParameters.Add("geojson", parameterToString(geojson))





	return sendRequestParseResponse[[]TrackableMotion](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)



}



// GetAllTrackableObjects get an array of all trackables.
// Returns an array of all trackable objects.
func (t *Trackables) GetAllTrackableObjects(ctx context.Context) (*[]Trackable, error) {
	requestPath := "/v1/trackables/summary"






	return sendRequestParseResponse[[]Trackable](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)



}



// GetAllTrackableProviders get all providers linked to this trackable.
// Returns the ids of all location providers linked to the trackable with the given id.
func (t *Trackables) GetAllTrackableProviders(ctx context.Context, trackableId string) (*[]string, error) {
	requestPath := "/v1/trackables/{trackable_id}/providers"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)






	return sendRequestParseResponse[[]string](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)



}



// GetAllTrackableSensors get an array of sensor objects.
// Returns data from the sensors of all location providers associated with the trackable with the given id.
func (t *Trackables) GetAllTrackableSensors(ctx context.Context, trackableId string) (*AnyType, error) {
	requestPath := "/v1/trackables/{trackable_id}/sensors"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)






	return sendRequestParseResponse[AnyType](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)



}



// GetInsideFenceForTrackable get all fences the trackable is within.
// Returns all fences for which the trackable is currently considered as being inside the respective fence, e.g., for which a region entry fence event was triggered.
func (t *Trackables) GetInsideFenceForTrackable(ctx context.Context, trackableId string, spatialQuery bool) (*[]Fence, error) {
	requestPath := "/v1/trackables/{trackable_id}/fences"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)


   requestQueryParameters := url.Values{}
   requestQueryParameters.Add("spatial_query", parameterToString(spatialQuery))





	return sendRequestParseResponse[[]Fence](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)



}



// GetMostSignificantTrackableLocation get a location.
// Returns the most significant location of the trackable with the given id, with consideration of all location updates from the trackable's location providers.
func (t *Trackables) GetMostSignificantTrackableLocation(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*Location, error) {
	requestPath := "/v1/trackables/{trackable_id}/location"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)


   requestQueryParameters := url.Values{}
   requestQueryParameters.Add("crs", parameterToString(crs))
   requestQueryParameters.Add("zone_id", parameterToString(zoneId))
   requestQueryParameters.Add("geojson", parameterToString(geojson))





	return sendRequestParseResponse[Location](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)



}



// GetTrackableById get a trackable.
// Returns the trackable object with the given id.
func (t *Trackables) GetTrackableById(ctx context.Context, trackableId string) (*Trackable, error) {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)






	return sendRequestParseResponse[Trackable](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		nil,
		nil,
	)



}



// GetTrackableMotion get a motion.
// Returns the motion object for the trackable with the given id.
func (t *Trackables) GetTrackableMotion(ctx context.Context, trackableId string, crs string, zoneId string, geojson string) (*TrackableMotion, error) {
	requestPath := "/v1/trackables/{trackable_id}/motion"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)


   requestQueryParameters := url.Values{}
   requestQueryParameters.Add("crs", parameterToString(crs))
   requestQueryParameters.Add("zone_id", parameterToString(zoneId))
   requestQueryParameters.Add("geojson", parameterToString(geojson))





	return sendRequestParseResponse[TrackableMotion](
		ctx,
		t.client,
		http.MethodGet,
		requestPath,
		nil,
		requestQueryParameters,
		nil,
	)



}



// UpdateTrackableById updates a trackable.
// Updates the trackable object with the given id.
func (t *Trackables) UpdateTrackableById(ctx context.Context, trackableId string, trackable Trackable) (error) {
	requestPath := "/v1/trackables/{trackable_id}"
	requestPath = strings.Replace(requestPath, "{"+"trackable_id"+"}", url.PathEscape(trackableId), -1)






	_, err := sendStructuredRequestParseResponse[any](
		ctx,
		t.client,
		http.MethodPut,
		requestPath,
		nil,
		nil,
		nil,
	)

	return err



}


